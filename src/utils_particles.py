''' Copyright 2017 labay11 - This code is fully based on the repository
                  https://github.com/labay11/ideal-gas-simulation
The functions have been from a class implementing matplotlib.animation.TimedAnimation.
'''


from __future__ import division, print_function
import numpy as np
import types
from utils import cache_result
import hashlib
import json
import os
import pickle

k_B = 1.380648e-23  # boltzmann contant (J/K)


def mod(v):
    """
        computes the squared sum over the last axis of the numpy.ndarray v
    """
    return np.sum(v * v, axis=-1)


def pmod(v, T, m):
    """
        Maxwell-Boltzmann's distribuion of probability
        for the length of the velocity vector v at temprature T
        for a particle of mass m
    """
    return 4 * np.pi * v ** 2 * np.power(m / (2 * np.pi * k_B * T), 3 / 2) * np.exp(- m * v ** 2 / (2 * k_B * T))


class Sim():
    """
        Complete code for the ideal gas animation.
    """

    def __init__(self, n_particles, rad, T, V, max_time, dt, mass=1.2e-20):
        """
            Initiallisation of parameters
            ::n_particles:: number of particles in the system
            ::mass:: of the particles (identicle for all of them)
            ::rad:: radius of the particles, notice that it must be
                    of the same order as (V/n_particles)^(1/3) in
                    order to see them colliding. If the radius is too
                    small then a few number of collisions would occur.
                    To remove completely the number of cillisions set the
                    radius to 0.
            ::T:: temperatura of the system, this will defie the initial
                    velocity of the particles
            ::V:: volume of the system, this could be a floating-point number or
                    a function of time. If it is a number then the volume will
                    remain constant all the time, if it is a function then at each
                    iteration the volume will be update over time.
            ::max_time:: maximum animation time
        """
        np.random.seed(0)
        self.PART = n_particles
        self.MASS = mass
        self.RAD = rad
        self.DIAM = 2 * rad

        self.T = T

        if isinstance(V, types.FunctionType):
            self.V0 = V(0)
            self.V = V
            self.Vconst = False
        else:
            self.V0 = V
            self.V = lambda t: V
            self.Vconst = True

        self.L = np.power(self.V0, 1 / 3)  # side length
        self.halfL = self.L / 2
        self.A = 6 * self.L ** 2  # total superfice area

        self.max_time = max_time
        self.dt = dt
        self.Nt = int(max_time / self.dt)

        self.evaluate_properties()

        # velocities histogram
        self.min_v = 0
        self.max_v = self.vmax * 3
        self.dv = 0.2  # (m/s)
        self.Nv = int((self.max_v - self.min_v) / self.dv)

        # pressure
        self.dP = 1  # (s)
        self.NP = int(max_time / self.dP)

        self.init_particles()
        self.former_init_figures()

    def evaluate_properties(self):
        """
            Calculates the initial properties of the system according
            to the laws of thermodynamics.
        """

        self.P = self.PART * k_B * self.T / self.V0
        self.U = 1.5 * self.PART * k_B * self.T
        self.vrms = np.sqrt(3 * k_B * self.T / self.MASS)
        self.vmax = np.sqrt(2 * k_B * self.T / self.MASS)
        self.vmed = np.sqrt(8 * k_B * self.T / (np.pi * self.MASS))

    def init_particles(self):
        """
            Init the particles positions and velocities.
            The initial positions are completely random inside the box.
            The initial velocities are generated by a random unitary vector with
            a length given by the average velocity (vmed) at the system temperature.
        """
        self.r = np.random.rand(self.PART, 3) * 2 * (self.halfL - self.RAD) - (self.halfL - self.RAD)

        v_polar = np.random.random((self.PART, 2))

        self.v = np.zeros((self.PART, 3))

        self.v[:, 0] = np.sin(v_polar[:, 0] * np.pi) * np.cos(v_polar[:, 1] * 2 * np.pi)
        self.v[:, 1] = np.sin(v_polar[:, 0] * np.pi) * np.sin(v_polar[:, 1] * 2 * np.pi)
        self.v[:, 2] = np.cos(v_polar[:, 0] * np.pi)

        self.v *= self.vrms  # not consistent with description which says vmed.

    def former_init_figures(self):

        self.vel_x = np.linspace(self.min_v, self.max_v, self.Nv)
        self.vel_y = np.zeros(self.Nv)
        self.ex_p = 0.0  # accumulated exchanged momentum with the walls
        self.last_P = -1
        self.P_x = np.zeros(self.NP)
        self.P_y = np.zeros(self.NP)

    def update_volume(self, t):
        """
            Sets the new volume and changes the axes limits.
        """

        self.V0 = self.V(t)
        self.L = np.power(self.V0, 1 / 3)
        self.halfL = self.L / 2
        self.A = 6 * self.L ** 2

    def _draw_frame(self, t):
        self.update_volume(t)

        # update the position
        self.r += self.dt * self.v

        # check for collitions with other particles
        dists = np.sqrt(mod(self.r - self.r[:, np.newaxis]))
        # (0 < dists) & (dists < self.DIAM) means there is a collision between 2 different particles
        cols2 = (0 < dists) & (dists < self.DIAM)
        # get the indices (the particles) where cols2 is true
        idx_i, idx_j = np.nonzero(cols2)
        # ***possibility to simplify this *** #
        for i, j in zip(idx_i, idx_j):
            if j < i:
                # skip duplications and same particle
                continue

            rij = self.r[i] - self.r[j]
            d = mod(rij)
            vij = self.v[i] - self.v[j]
            dv = np.dot(vij, rij) * rij / d
            self.v[i] -= dv
            self.v[j] += dv

            # update the positions so they are no longer in contact
            self.r[i] += self.dt * self.v[i]
            self.r[j] += self.dt * self.v[j]

        # check for collition with the walls
        walls = np.nonzero(np.abs(self.r) + self.RAD > self.halfL)
        self.v[walls] *= -1
        self.r[walls] -= self.RAD * np.sign(self.r[walls])

        # calc the position of the center of masses
        CM = np.sum(self.r, axis=0) / self.PART

        # make velocities histogram
        v_mod = np.sqrt(mod(self.v))

        for k in range(self.Nv):
            self.vel_y[k] = np.count_nonzero((k * self.dv < v_mod) & (v_mod < (k + 1) * self.dv))

        # add the momentum exchanged in this iteration to the accumulated one
        self.ex_p += 2 * self.MASS * np.sum(np.abs(self.v[walls]))
        i = int(t / self.dP)
        if i > self.last_P + 1:
            # calculate the pressure after self.dP seconds

            self.last_P = i - 1

            A_avg = self.A if self.Vconst else (self.A + 6 * np.power(self.V(t - self.dP), 2 / 3)) / 2

            self.P_x[self.last_P] = (t if self.Vconst else self.V0)
            self.P_y[self.last_P] = self.ex_p / (self.dP * A_avg)

            self.ex_p = 0.0
        return self.r

def V_(t, V0=1, Vf=10, t_max=5):
    return V0 + (Vf - V0) * t / t_max


class DatasetParticles():
    """
    Class for computing the path signatures.
    """

    def __init__(self, M, N, L, ymin, ymax, radius, max_time = 2, dt = 0.01, V=3):
        """
        Parameters
        ----------
        dataset : string
            Name of the dataset
        dataset_type: string
            Whether it is the train, validation or the test set
        truncation_level : int
            Path signature trucation level.
        add_time: bool
            Whether add time was applied
        lead_lag_transformation : bool
            Whether lead-lag was applied.
        """
        self.name = Particles
        self.M = M 
        self.N = N 
        self.ymin = ymin 
        self.ymax = ymax
        self.V = V
        self.radius = radius*self.(V/self.N)**(1./3)
        self.dt = 0.01
        self.max_time = L*self.dt


    @cache_result
    def generate(self):
        X = []
        temperatures = np.array((self.ymax-self.ymin)*np.random.rand(self.M)+self.ymin)
        gases = []

        for temp in tqdm(temperatures):
            Gas = Sim(self.N, self.radius, temp, self.V, self.max_time, self.dt)
            
            # To store the trajectories
            trajectories = [[] for i in range(self.N)]

            for t in np.linspace(0, Gas.max_time, Gas.Nt):
                positions = Gas._draw_frame(t)
                for i in range(len(trajectories)):
                    # update particle i
                    trajectories[i].append(list(positions[i]))
            trajectories = [np.array(particle) for particle in trajectories]
            
            gases.append(trajectories)
        return [gases, temperatures/self.ymax]

    def __str__(self):
        """
        Convert object to string. Used in conjunction with cache_result().
        """
        return str((self.name
                    self.M,
                    self.N,
                    self.ymin,
                    self.ymax,
                    self.radius,
                    self.max_time,
                    self.dt
                    self.V))

